{"ast":null,"code":"var _jsxFileName = \"/home/civlon/code/demonstrator_app/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [data, setData] = useState({});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"hier sollte es stehen: \", JSON.stringify(data)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      children: \"Get Test Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"0PQhZyvNHTQmyp/cNfIsZk8MtX8=\");\n\n_c = App;\nexport default App;\n\nfunction Button(_ref) {\n  _s2();\n\n  let {\n    children,\n    ...props\n  } = _ref;\n  const [isButtonLoading, setIsButtonLoading] = useState(false);\n\n  const handleOnClick = async () => {\n    setIsButtonLoading(true);\n    await fetch(\"/getTestData\").then(res => res.json()).then(data => {\n      setData(data);\n    }, []);\n    setIsButtonLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: async () => await handleOnClick(),\n    className: \"button\",\n    ...props,\n    children: isButtonLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 26\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Button, \"fsAI7PCwY1J7QfcEjhYoWyy1VIM=\");\n\n_c2 = Button;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Button\");","map":{"version":3,"names":["React","useState","useEffect","App","data","setData","JSON","stringify","Button","children","props","isButtonLoading","setIsButtonLoading","handleOnClick","fetch","then","res","json"],"sources":["/home/civlon/code/demonstrator_app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\n\n\nfunction App() {\n  const [data, setData] = useState({})\n\n\n  return (\n    <div>\n      <p>hier sollte es stehen: {JSON.stringify(data)}</p>\n      <Button>Get Test Data</Button>\n    </div>\n  )\n\n}\n\nexport default App\n\nfunction Button({ children, ...props }) {\n  const [isButtonLoading, setIsButtonLoading] = useState(false);\n\n  const handleOnClick = async () => {\n    setIsButtonLoading(true);\n    await fetch(\"/getTestData\").then(res => res.json()).then(data => { setData(data) }, [])\n    setIsButtonLoading(false);\n  }\n\n  return (\n    <button onClick={async () => await handleOnClick()} className=\"button\" {...props}>\n      {isButtonLoading ? <Loader /> : children}\n    </button>\n  );\n}"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAGA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;EAGA,oBACE;IAAA,wBACE;MAAA,sCAA2BK,IAAI,CAACC,SAAL,CAAeH,IAAf,CAA3B;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,MAAD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAOD;;GAXQD,G;;KAAAA,G;AAaT,eAAeA,GAAf;;AAEA,SAASK,MAAT,OAAwC;EAAA;;EAAA,IAAxB;IAAEC,QAAF;IAAY,GAAGC;EAAf,CAAwB;EACtC,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,KAAD,CAAtD;;EAEA,MAAMY,aAAa,GAAG,YAAY;IAChCD,kBAAkB,CAAC,IAAD,CAAlB;IACA,MAAME,KAAK,CAAC,cAAD,CAAL,CAAsBC,IAAtB,CAA2BC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAlC,EAA8CF,IAA9C,CAAmDX,IAAI,IAAI;MAAEC,OAAO,CAACD,IAAD,CAAP;IAAe,CAA5E,EAA8E,EAA9E,CAAN;IACAQ,kBAAkB,CAAC,KAAD,CAAlB;EACD,CAJD;;EAMA,oBACE;IAAQ,OAAO,EAAE,YAAY,MAAMC,aAAa,EAAhD;IAAoD,SAAS,EAAC,QAA9D;IAAA,GAA2EH,KAA3E;IAAA,UACGC,eAAe,gBAAG,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QAAH,GAAgBF;EADlC;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;IAdQD,M;;MAAAA,M"},"metadata":{},"sourceType":"module"}